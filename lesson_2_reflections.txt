What happens when you initialize a repository? Why do you need to do it?

git init initializes the directory. It makes a hidden folder called .git. It does not create a commit. It must be done before creating a commit.


How is the staging area different from the working directory and the repository? What value do you think it offers?

The staging area is only for files you want to commit. The repository is all of the files that have been committed. The working directory is what the staging area and repository point to.


How can you use the staging area to make sure you have one commit per logical change?

Stage only the files with the logical change that you want. Then commit. Then stage the files for the next logical change and commit those.


What are some situations when branches would be helpful in keeping your history organized? How would branches help?

Branches are helpful when you want to try out changes that you may not want to keep. Experiments, testing, alternate ways to have something work. Like an easy method for a game.

How do the diagrams help you visualize the branch structure?

Diagrams show you where the branch starts. It helps keep thigs organized.


What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

Merging branches together combines code from both branches. Diagram shows new Master created from the two branches.


What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

If merges can be done automatically, it saves time. But you might not want the merge to be done the way it automatically does it. Manually doing it takes extra time, but you get what you want.
